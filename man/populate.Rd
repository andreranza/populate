% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/populate.R
\name{populate}
\alias{populate}
\title{Populate a data frame}
\usage{
populate(.data, ..., .strict = FALSE)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g. a tibble), or a
lazy data frame (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for
more details.}

\item{...}{<\code{\link[dplyr:dplyr_data_masking]{data-masking}}> Name-value pairs.
The name gives the name of the column in the output.

The value can be:
\itemize{
\item A vector of length 1, which will be recycled to the correct length.
\item A vector the same length as the current group (or the whole data frame
if ungrouped).
\item \code{NULL}, to remove the column.
\item A data frame or tibble, to create multiple columns in the output.
}}

\item{.strict}{Boolean. If \code{FALSE} (default), we attempt to cast the input
tot he fitting type using \code{vctrs::vec_cast()}, if \code{TRUE} we perform a strict
check using \code{vctrs::vec_assert()}}
}
\description{
A wrapper around \code{dplyr::mutate()} that enforces ptype stability, i.e. we
guarantee that the \code{vctrs::vec_ptype()} of the output is \code{vctrs::vec_ptype(.data)}.
New columns cannot be created with \code{populate()}, use \code{collate()} for this purpose.
}
\examples{
\dontrun{
data <- tibble::tibble(
  a = letters[1:2],
  b = c(1,2),
  c = factor(letters[1:2]),
  d = as.Date(c("2022-01-01", "2022-01-02")),
  e = vctrs::list_of(cars)
)

# can't create a column if it exists
collate(data, a = 1)

# but we can create new columns
collate(data, ee = 1)

# we can't create a new column with populate()
populate(data, ee = 1)

# can't cast double to character
populate(data, a = 1)

# casting integer to double
populate(data, b = 3:4)

# doesn't work if `.strict` is `TRUE`
populate(data, b = 3:4, .strict = TRUE)

# casting character to factor with allowed levels
populate(data, c = c("b", "b"))

# can't cast because wrong levels
populate(data, c = c("b", "d"))

# datetimes are casted to date
populate(data, d = lubridate::as_datetime(c("2022-01-01", "2022-01-02")))

# characters can't be casted to date
populate(data, d = c("2022-01-01", "2022-01-02"))

# using list_of allowed us to prevent corrupting our data silently
populate(data, e = list(iris))

# and we don't have to bother with list_of anymore if we feed the right format
populate(data, e = list(head(cars)))
}
}
\seealso{
collate
}
